/*
 * Pagamentos API
 *
 * API de Pagamentos
 *
 * OpenAPI spec version: 1.0.0
 * Contact: michael.costa@localiza.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using Microsoft.Extensions.Caching.Memory;
using System.Linq;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DevelopersApiController : ControllerBase
    {
        IMemoryCache Cache = null;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="cache"></param>
        public DevelopersApiController(IMemoryCache cache)
        {
            Cache = cache;
        }

        /// <summary>
        /// Busca Pagamento
        /// </summary>
        /// <remarks>Retorna lista de pagamentos disponíveis </remarks>
        /// <param name="id">código do pagamento (opcional)</param>
        /// <response code="200">resultados conforme critérios informados</response>
        /// <response code="400">entrada inválida</response>
        [HttpGet]
        [Route("/michaelcosta/Pagamentos/1.0.0/pagamentos")]
        [ValidateModelState]
        [SwaggerOperation("BuscarPagamento")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Pagamento>), description: "resultados conforme critérios informados")]
        public virtual IActionResult BuscarPagamento([FromQuery]string id)
        {
            List<Pagamento> listaPagamento = (List<Pagamento>)Cache.Get("ListaPagamentos");

            if (listaPagamento == null)
            {
                listaPagamento = Startup.CarregarMockPagamento();

                Cache.Set("ListaPagamentos", listaPagamento, DateTimeOffset.Now.AddMinutes(10.0));

                return StatusCode(404);
            }

            if (id == null)
            {
                return StatusCode(200, listaPagamento);
            }
            else
            {

                var pagamento = from p in listaPagamento
                                where p.Id.ToString() == id
                                select p;

                if (pagamento.Count() == 0)
                {
                    return StatusCode(404);
                }
                else
                {
                    return StatusCode(200, pagamento.FirstOrDefault());
                }
            }
        }
    }
}
