/*
 * Reservas API
 *
 * API de Reservas
 *
 * OpenAPI spec version: 1.0.0
 * Contact: michael.costa@localiza.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using Microsoft.Extensions.Caching.Memory;
using System.Linq;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DevelopersApiController : ControllerBase
    {
        IMemoryCache Cache = null;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="cache"></param>
        public DevelopersApiController(IMemoryCache cache)
        {
            Cache = cache;
        }

        /// <summary>
        /// Busca reservas
        /// </summary>
        /// <remarks>Retorna lista de reservas disponíveis </remarks>
        /// <param name="loja">código da loja (opcional)</param>
        /// <param name="placa">placa do carro (opcional)</param>
        /// <param name="localizador">localizador (opcional)</param>
        /// <response code="200">resultados conforme critérios informados</response>
        /// <response code="400">entrada inválida</response>
        #nullable enable
        [HttpGet]
        [Route("/michaelcosta/Reservas/1.0.0/reservas")]
        [ValidateModelState]
        [SwaggerOperation("BuscarReservas")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Reserva>), description: "resultados conforme critérios informados")]
        public virtual IActionResult BuscarReservas([FromQuery] string? loja, [FromQuery] string? placa, string? localizador)
        {
            List<Reserva> listaReservas = (List<Reserva>)Cache.Get("ListaReservas");

            if (listaReservas == null)
            {
                listaReservas = Startup.CarregarMockReserva();

                Cache.Set("ListaReservas", listaReservas, DateTimeOffset.Now.AddMinutes(10.0));
            }

            if (loja != null)
            {
                var result = from l in listaReservas
                             where l.Loja == loja
                             select l;
                if (result.Any())
                {

                    return StatusCode(200, result);
                }
                else
                {
                    return StatusCode(404);
                }
            }
            else if (placa != null)
            {
                var result = from l in listaReservas
                             where l.Placa == placa
                             && (l.Status != "UTILIZADA" || l.Status != "CANCELADA"
                                 || l.Status != "CONCLUIDA")
                             select l;
                if (result.Any())
                {

                    return StatusCode(200, result);
                }
                else
                {
                    return StatusCode(404);
                }
            }
            else if (localizador != null)
            {
                var result = from l in listaReservas
                             where l.Localizador == localizador
                             select l;
                if (result.Any())
                {

                    return StatusCode(200, result);
                }
                else
                {
                    return StatusCode(404);
                }
            } else
            {
                return StatusCode(200, listaReservas);
            }
        }
    }
}
