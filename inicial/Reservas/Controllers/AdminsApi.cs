/*
 * Reservas API
 *
 * API de Reservas
 *
 * OpenAPI spec version: 1.0.0
 * Contact: michael.costa@localiza.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json.Linq;
using Microsoft.Extensions.Caching.Memory;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Net;

namespace IO.Swagger.Controllers
{

    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AdminsApiController : ControllerBase
    {
        private IMemoryCache Cache = null;

        private readonly IConfiguration Configuration;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="configuration"></param>
        /// <param name="cache"></param>
        public AdminsApiController(IConfiguration configuration, IMemoryCache cache)
        {
            Configuration = configuration;
            Cache = cache;
        }

        /// <summary>
        /// adiciona uma reserva
        /// </summary>
        /// <remarks>adiciona uma reserva a loja/carro</remarks>
        /// <param name="reserva">Reserva a adicionar</param>
        /// <response code="201">reserva criado</response>
        /// <response code="400">entrada inválida, objeto inválido</response>
        /// <response code="409">uma reserva com esses dados já existe</response>
        [HttpPost]
        [Route("/michaelcosta/Reservas/1.0.0/reservas")]
        [ValidateModelState]
        [SwaggerOperation("AdicionarReserva")]
        public virtual IActionResult AdicionarReserva([FromBody]Reserva reserva)
        {

            # region Valida se o cliente é válido

            var response = HttpRequestHelper.TryGetHTTPResponse($"{Configuration["ApiReferences:Clientes"]}clientes?id={reserva.IdCliente}");

            if (response == null)
            {
                return StatusCode(500);
            } else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                return StatusCode(400,"Cliente inexistente");
            }

            response.EnsureSuccessStatusCode();

            string responseBody = response.Content.ReadAsStringAsync().Result;

            var clienteJson = JArray.Parse(responseBody);

            # endregion Valida se o cliente é válido


            # region Valida se o carro é válido

            response = HttpRequestHelper.TryGetHTTPResponse($"{Configuration["ApiReferences:Carros"]}carros?placa={reserva.Placa}");

            if (response == null)
            {
                return StatusCode(500);
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                return StatusCode(400, "Placa inexistente");
            }

            response.EnsureSuccessStatusCode();

            responseBody = response.Content.ReadAsStringAsync().Result;

            var carroJson = JArray.Parse(responseBody);

            reserva.Loja = carroJson[0]["loja"].Value<string>();

            #endregion Valida se o carro é válido

            #region Valida se já existe reserva para o carro em questão

            List<Reserva> listaReservas = (List<Reserva>)Cache.Get("ListaReservas");

            if (listaReservas == null)
            {
                listaReservas = Startup.CarregarMockReserva();

                Cache.Set("ListaReservas", listaReservas, DateTimeOffset.Now.AddMinutes(10.0));
            }

            var existeReserva = from l in listaReservas
                                where l.Placa == reserva.Placa
                                && (l.Status.ToString() != "UTILIZADA" || l.Status.ToString() != "CANCELADA"
                                    || l.Status.ToString() != "CONCLUIDA"
                                    )
                                select l;

            if (existeReserva.Count() > 0)
            {
                return StatusCode(409, "Já existe uma reserva pendente de utilização para a placa informada");
            }

            int novoId = (new Random()).Next(10000);
            reserva.Localizador = $"WS{novoId}";
            reserva.Status = "AGUARDANDO PAGAMENTO";
            reserva.IdPagamento = novoId;

            listaReservas.Add(reserva);

            #region Criar Pagamento

            var payload = "{\"id\": "+novoId+",\"status\": \"EM ABERTO\"}";

            HttpContent c = new StringContent(payload, Encoding.UTF8, "application/json");

            var pagamentoResponse = HttpRequestHelper.TryPostHTTPResponse($"{Configuration["ApiReferences:Pagamentos"]}pagamentos?placa={reserva.Placa}", c);
            if (pagamentoResponse.StatusCode != HttpStatusCode.Created)
            {
                return StatusCode(500, "Erro ao criar pagamento, tente novamente mais tarde");
            }
            #endregion

            Cache.Set("ListaReservas", listaReservas, DateTimeOffset.Now.AddMinutes(10.0));



            #endregion

            return StatusCode(201, reserva);
        }

        /// <summary>
        /// altera uma reserva
        /// </summary>
        /// <remarks>altera dados de uma reserva existente</remarks>
        /// <param name="localizador">Localizador da reserva a alterar</param>
        /// <param name="reserva">Reserva a alterar</param>
        /// <response code="200">reserva alterada</response>
        /// <response code="400">entrada inválida, objeto inválido</response>
        /// <response code="404">nenhuma reserva encontrada com o localizador informado</response>
        [HttpPatch]
        [Route("/michaelcosta/Reservas/1.0.0/reservas/{localizador}")]
        [ValidateModelState]
        [SwaggerOperation("AlterarReserva")]
        public virtual IActionResult AlterarReserva([FromRoute][Required] string localizador, [FromBody] Reserva reserva)
        {

            if (!"UTILIZADA;CANCELADA;CONCLUIDA;PAGAMENTO APROVADO".Contains(reserva.Status.ToString()))
            {
                return StatusCode(400, "Status inválido. Somente os seguintes sao possíveis: UTILIZADA;CANCELADA;CONCLUIDA;PAGAMENTO APROVADO");
            }

            List<Reserva> listaReservas = (List<Reserva>)Cache.Get("ListaReservas");
            if (listaReservas == null)
            {
                listaReservas = Startup.CarregarMockReserva();

                Cache.Set("ListaReservas", listaReservas, DateTimeOffset.Now.AddMinutes(10.0));
            }


            var existeReserva = from l in listaReservas
                                where l.Localizador == localizador
                                select l;

            if (existeReserva.Count() == 0)
            {
                return StatusCode(404);
            } else {

                foreach (Reserva r in listaReservas)
                {
                    //atualiza cache
                    if (r.Localizador == localizador)
                    {
                        r.Status = reserva.Status;
                        Cache.Set("ListaReservas", listaReservas, DateTimeOffset.Now.AddMinutes(10.0));
                        return StatusCode(200);
                    }
                }
            }

            return StatusCode(400);
        }
    }
}
