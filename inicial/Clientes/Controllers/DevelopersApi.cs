/*
 * Clientes API
 *
 * API de Clientes
 *
 * OpenAPI spec version: 1.0.0
 * Contact: michael.costa@localiza.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using Microsoft.Extensions.Caching.Memory;
using System.Linq;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DevelopersApiController : ControllerBase
    {
        IMemoryCache cache = null;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="cache"></param>
        public DevelopersApiController(IMemoryCache cache)
        {
            this.cache = cache;
        }

        /// <summary>
        /// Busca clientes
        /// </summary>
        /// <remarks>Retorna lista de clientes disponíveis </remarks>
        /// <param name="id">Código da cliente (opcional)</param>
        /// <response code="200">Resultados conforme critérios informados</response>
        /// <response code="400">Entrada inválida</response>
        [HttpGet]
        [Route("/michaelcosta/Cliente/1.0.0/clientes")]
        [ValidateModelState]
        [SwaggerOperation("BuscarClientes")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Cliente>), description: "Resultados conforme critérios informados")]
        public virtual IActionResult BuscarClientes([FromQuery]int? id)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...

            List<Cliente> lista = (List<Cliente>)cache.Get("ListaClientes");
            if (lista == null)
            {
                lista = Startup.GerarMockClientes();
                cache.Set<List<Models.Cliente>>("ListaClientes", lista, DateTimeOffset.Now.AddMinutes(10.0));
            }

            if (id != null)
            {
                var result = from l in lista
                             where l.Id == id
                             select l;
                if (result.Any())
                {

                    return StatusCode(200, result);
                }
                else
                {
                    return StatusCode(404);
                }
            }
            else
            {

                return StatusCode(200, lista);
            }

        }
    }
}
